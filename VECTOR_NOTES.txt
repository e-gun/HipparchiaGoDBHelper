
interacting with the module

// func HipparchiaBagger(searchkey string, baggingmethod string, goroutines int, thedb string, thestart int, theend int, loglevel int, r RedisLogin, p PostgresLogin) string

pip install pybindgen
go mod init github.com/e-gun/e-gun/HipparchiaGoGrabberModule
go mod tidy
go get github.com/go-python/gopy/gopyh
go get golang.org/x/tools/cmd/goimports
go get github.com/go-python/gopy
gsed -i "s/package main/package hipparchiagolangsearching/" *.go
rm -rf ./golangmodule/ && gopy build -output=golangmodule -vm=`which python3` $GOPATH/src/github.com/e-gun/HipparchiaGoDBHelper/


// hipparchia_venv/HipparchiaServer/ % python3

pw = 'MYPASSWORD'
import server.externalmodule.hipparchiagolangsearching as gs
r = gs.NewRedisLogin('localhost:6379', '', 0)
p = gs.NewPostgresLogin('localhost', 5432, 'hippa_rd', pw, 'hipparchiaDB')
b = gs.HipparchiaBagger
b('', 'winnertakesall', 5, 'lt0448', 1, 26, 3, '', '', r, p)


output:

[works with v.1.2.0]
[panics as of v.1.2.1]
[works with v.1.2.2]['sonic' broke things: back to "encoding/json"]


>>> b('', 'winnertakesall', 5, 'lt0474', 1, 140000, 5, '', '', r, p)
[HGH] Bagger Module Launched
[HGH] Seeking to build *winnertakesall* bags of words
[HGH] Connected to redis
[HGH] Connected to hipparchiaDB on PostgreSQL
[HGH] No redis key; gathering lines with a direct CLI PostgreSQL query
[HGH] [A: 0.331s][Δ: 0.331s] 140000 lines acquired
[HGH] [B: 0.416s][Δ: 0.085s] Unified text block built
[HGH] [C: 0.569s][Δ: 0.153s] Preliminary cleanups complete
[HGH] [D: 1.582s][Δ: 1.013s] Found 68790 sentences
[HGH] [E: 1.652s][Δ: 0.070s] Found 80125 distinct words
[HGH] [F: 2.058s][Δ: 0.406s] Got morphology for 73819 terms
[HGH] [G: 2.088s][Δ: 0.030s] Built morphmap for 80290 terms
[HGH] [H: 2.454s][Δ: 0.366s] Finished bagging 68790 bags
[HGH] [I: 2.597s][Δ: 0.144s] Cleared stopwords: 68005 bags remain
[HGH] [J: 3.896s][Δ: 1.299s] Finished loading
'_vectorresults'


127.0.0.1:6379> spop _vectorresults 3
1) "{\"Loc\":\"line/lt0474w049/90191\",\"Bag\":\" oratio summum malius detraho affero evenio opinor\"}"
2) "{\"Loc\":\"line/lt0474w058/139322\",\"Bag\":\" fugio turbo\xc2\xb9 senatus voco curius\xc2\xb2\"}"
3) "{\"Loc\":\"line/lt0474w058/139643\",\"Bag\":\" scribo balbus\xc2\xb9 fasciculus epistula balbus\xc2\xb2 totus\xc2\xb9 aqua madidus reddo scio aliqui epistula\"}"

Optimization candidates

it would be nice to build the word2vec model inside of go; then it could just be stored...
this would save to hand-off time (which can be substantial on a full corpus), but it might be slower than python's optimized C?

Word Embeddings in Go:
    https://github.com/ynqa/wego

see the speed notes at https://github.com/mklf/word2vec-rs : rust is definitely slower...

so you would need to call a C version of word2vec from go:

    https://karthikkaranth.me/blog/calling-c-code-from-go/


#
# initial results:
#

e-gun/HipparchiaGoDBHelper/ %  date && ./HipparchiaGoDBHelper -sv -l 3 -svdb lt0474 -svs 4 -sve 140000 -k "" && date
Fri May  7 15:05:07 EDT 2021
[HGH] Hipparchia Golang Helper CLI Debugging Interface (v.0.1.5) [loglevel=3]
[HGH] Seeking to build *winnertakesall* bags of words
[HGH] Connected to redis
[HGH] Connected to hipparchiaDB on PostgreSQL
[HGH] No redis key; gathering lines with a direct CLI PostgreSQL query%!(EXTRA string=hipparchiaDB)
[HGH] found 79683 sentences [D: 1.803721s]
[HGH] foundmorph contains 65693 members
[HGH] Got morphology [F: 12.326225s]
[HGH] contents of bag[0]:
[HGH] contents of bag[1]: qui² alter
[HGH] Reached result @ 21.866201s]
bags have been stored at _vectorresultsFri May  7 15:05:29 EDT 2021

#
# first optimizations:
#

1062 •erik@big-sur-box• e-gun/HipparchiaGoDBHelper/ %  date && ./HipparchiaGoDBHelper -sv -l 5 -svdb lt0474 -svs 4 -sve 140000 -k "" -p ${L} && date
Fri May  7 15:21:46 EDT 2021
[HGH] Hipparchia Golang Helper CLI Debugging Interface (v.0.1.6) [loglevel=5]
[HGH] Seeking to build *winnertakesall* bags of words
[HGH] Connected to redis
[HGH] Connected to hipparchiaDB on PostgreSQL
[HGH] No redis key; gathering lines with a direct CLI PostgreSQL query%!(EXTRA string=hipparchiaDB)
[HGH] unified text block built [B: 0.275347s])
[HGH] preliminary cleanups complete [C: 0.353454s])
[HGH] found 79683 sentences [D: 1.397037s]
[HGH] found 79975 distinct words [E: 1.458788s]
[HGH] foundmorph contains 65693 members
[HGH] Got morphology [F: 2.731060s]
[HGH] Build morphdict [F1: 5.445373s]
[HGH] Pre-Bagging [F2: 5.477660s]
[HGH] Post-Bagging [F3: 5.713629s]
[HGH] contents of bag[0]:
[HGH] contents of bag[1]: qui¹ alter
[HGH] Reached result @ 12.170620s]
bags have been stored at _vectorresultsFri May  7 15:21:58 EDT 2021


50% of your time is spent storing the bags
finding the morphology takes less time than building the morph dict...
parallel loading of redis speeds things up... [but pipelining is way faster still...]

date && ./HipparchiaGoDBHelper -sv -l 3 -svdb lt0474 -svs 4 -sve 140000 -k "" -t 5 -p ${L} && date
Mon Jun  7 17:38:01 EDT 2021
[HGH] Hipparchia Golang Helper CLI Debugging Interface (v.1.0.10) [loglevel=3]
[HGH] Bagger Module Launched
[HGH] Seeking to build *winnertakesall* bags of words
[HGH] Connected to redis
[HGH] Connected to hipparchiaDB on PostgreSQL
[HGH] No redis key; gathering lines with a direct CLI PostgreSQL query
[HGH] 139997 lines acquired [A: 0.214960s])
[HGH] unified text block built [B: 0.290444s])
[HGH] preliminary cleanups complete [C: 0.367368s])
[HGH] found 79683 sentences [D: 1.442941s]
[HGH] found 79991 distinct words [E: 1.517810s]
[HGH] Got morphology for 66334 terms [F: 2.229176s]
[HGH] Built morphmap for 66334 terms [G: 2.942428s]
[HGH] Finished bagging 79683 bags [H: 3.318505s]
[HGH] Cleared stopwords [I: 3.446793s]
[HGH] Finished loading [J: 5.156378s]
bags have been stored at _vectorresultsMon Jun  7 17:38:06 EDT 2021


===

after pre-building the possibilities inside of the database...

% ./HipparchiaGoDBHelper -sv -l 3 -svdb lt0474 -svs 4 -sve 140000 -k "" -t 5 -p ${L}
  [HGH] Hipparchia Golang Helper CLI Debugging Interface (v.1.2.1) [loglevel=3]
  [HGH] Bagger Module Launched
  [HGH] Seeking to build *winnertakesall* bags of words
  [HGH] Connected to redis
  [HGH] Connected to hipparchiaDB on PostgreSQL
  [HGH] No redis key; gathering lines with a direct CLI PostgreSQL query
  [HGH] [A: 0.209s][Δ: 0.209s] 139997 lines acquired
  [HGH] [B: 0.289s][Δ: 0.080s] Unified text block built
  [HGH] [C: 0.440s][Δ: 0.151s] Preliminary cleanups complete
  [HGH] [D: 1.408s][Δ: 0.968s] Found 68790 sentences
  [HGH] [E: 1.467s][Δ: 0.059s] Found 80125 distinct words
  [HGH] [F: 1.855s][Δ: 0.389s] Got morphology for 73819 terms
  [HGH] [G: 1.884s][Δ: 0.029s] Built morphmap for 80290 terms
  [HGH] [H: 2.252s][Δ: 0.368s] Finished bagging 68790 bags
  [HGH] [I: 2.399s][Δ: 0.147s] Cleared stopwords: 67639 bags remain
  [HGH] [J: 3.603s][Δ: 1.204s] Finished loading

===

pipelined redis is fast


% ./HipparchiaGoDBHelper -mprofile -cprofile -sv -l 3 -svdb lt0474 -svs 4 -sve 149570 -k "" -t 6 -svbs 1 -p ${L}
[HGH] logging cpu profiling data to 'cpu_profiler_output.bin'
[HGH] Hipparchia Golang Helper CLI Debugging Interface (v.1.3.4) [loglevel=3]
[HGH] Bagger Module Launched
[HGH] Seeking to build *winnertakesall* bags of words
[HGH] Connected to redis
[HGH] Connected to hipparchiaDB on PostgreSQL
[HGH] No redis key; gathering lines with a direct CLI PostgreSQL query
[HGH] [A: 0.244s][Δ: 0.244s] 149567 lines acquired
[HGH] [B: 0.322s][Δ: 0.079s] Unified text block built
[HGH] [C: 0.472s][Δ: 0.149s] Preliminary cleanups complete
[HGH] [D: 1.542s][Δ: 1.070s] Inserted 72930 sentences into 72930 bags
[HGH] [E: 1.608s][Δ: 0.066s] Found 83301 distinct words
[HGH] [F: 2.119s][Δ: 0.511s] Got morphology for 76492 terms
[HGH] [G: 2.150s][Δ: 0.030s] Built morphmap for 83469 terms
[HGH] [H: 2.536s][Δ: 0.387s] Finished bagging 72930 bags
[HGH] [I: 2.694s][Δ: 0.157s] Cleared stopwords: 71833 bags remain
[HGH] [J: 2.843s][Δ: 0.149s] Finished loading
[HGH] logging memory profiling data to 'mem_profiler_output.bin'
bags have been stored at _vectorresults%


1069 •erik@big-sur-box• e-gun/HipparchiaGoDBHelper/ % go tool pprof ./HipparchiaGoDBHelper ./cpu_profiler_output.bin
File: HipparchiaGoDBHelper
Type: cpu
Time: Jul 2, 2021 at 12:27pm (EDT)
Duration: 2.87s, Total samples = 2.67s (93.08%)
Entering interactive mode (type "help" for commands, "o" for options)
(pprof) top 25
Showing nodes accounting for 1810ms, 67.79% of 2670ms total
Dropped 99 nodes (cum <= 13.35ms)
Showing top 25 nodes out of 212
      flat  flat%   sum%        cum   cum%
     240ms  8.99%  8.99%      240ms  8.99%  runtime.memmove
     190ms  7.12% 16.10%      190ms  7.12%  syscall.syscall
     180ms  6.74% 22.85%      180ms  6.74%  runtime.kevent
     140ms  5.24% 28.09%      320ms 11.99%  regexp.(*Regexp).tryBacktrack
     130ms  4.87% 32.96%      130ms  4.87%  runtime.madvise
      90ms  3.37% 36.33%       90ms  3.37%  regexp/syntax.(*Inst).MatchRunePos
      90ms  3.37% 39.70%      260ms  9.74%  runtime.netpoll
      70ms  2.62% 42.32%       70ms  2.62%  runtime.usleep
      50ms  1.87% 44.19%      280ms 10.49%  regexp/syntax.(*parser).parseClass
      50ms  1.87% 46.07%       50ms  1.87%  runtime.heapBitsSetType
      50ms  1.87% 47.94%       50ms  1.87%  runtime.memclrNoHeapPointers
      50ms  1.87% 49.81%       50ms  1.87%  runtime.pthread_cond_wait
      50ms  1.87% 51.69%       80ms  3.00%  runtime.stkbucket
      50ms  1.87% 53.56%       60ms  2.25%  strings.(*genericReplacer).WriteString
      50ms  1.87% 55.43%       50ms  1.87%  unicode/utf8.DecodeRuneInString
      40ms  1.50% 56.93%       40ms  1.50%  indexbytebody
      40ms  1.50% 58.43%       50ms  1.87%  runtime.evacuate_faststr
      40ms  1.50% 59.93%       40ms  1.50%  runtime.nanotime1
      30ms  1.12% 61.05%      250ms  9.36%  main.buildwinnertakesallbagsofwords
      30ms  1.12% 62.17%      130ms  4.87%  main.fetchdblinesdirectly
      30ms  1.12% 63.30%       30ms  1.12%  regexp.(*bitState).shouldVisit (inline)
      30ms  1.12% 64.42%       40ms  1.50%  regexp.(*inputString).step
      30ms  1.12% 65.54%       80ms  3.00%  regexp/syntax.(*parser).parseClassChar
      30ms  1.12% 66.67%       30ms  1.12%  regexp/syntax.ranges.Less
      30ms  1.12% 67.79%       30ms  1.12%  regexp/syntax.ranges.Swap
(pprof) top25 -cum
Showing nodes accounting for 0.62s, 23.22% of 2.67s total
Dropped 99 nodes (cum <= 0.01s)
Showing top 25 nodes out of 212
      flat  flat%   sum%        cum   cum%
     0.01s  0.37%  0.37%      1.77s 66.29%  main.HipparchiaBagger
         0     0%  0.37%      1.77s 66.29%  main.main
         0     0%  0.37%      1.77s 66.29%  runtime.main
     0.01s  0.37%  0.75%      0.74s 27.72%  main.stripper
         0     0%  0.75%      0.53s 19.85%  runtime.systemstack
         0     0%  0.75%      0.40s 14.98%  regexp.(*Regexp).doExecute
         0     0%  0.75%      0.39s 14.61%  regexp.Compile (inline)
         0     0%  0.75%      0.39s 14.61%  regexp.MustCompile
     0.01s  0.37%  1.12%      0.39s 14.61%  regexp.compile
         0     0%  1.12%      0.37s 13.86%  regexp.(*Regexp).backtrack
         0     0%  1.12%      0.36s 13.48%  regexp/syntax.Parse
         0     0%  1.12%      0.34s 12.73%  regexp.(*Regexp).ReplaceAllString
         0     0%  1.12%      0.34s 12.73%  regexp.(*Regexp).replaceAll
     0.14s  5.24%  6.37%      0.32s 11.99%  regexp.(*Regexp).tryBacktrack
     0.02s  0.75%  7.12%      0.32s 11.99%  runtime.mallocgc
     0.05s  1.87%  8.99%      0.28s 10.49%  regexp/syntax.(*parser).parseClass
         0     0%  8.99%      0.28s 10.49%  runtime.gcBgMarkWorker.func2
         0     0%  8.99%      0.28s 10.49%  runtime.gcDrain
         0     0%  8.99%      0.28s 10.49%  runtime.mstart
     0.09s  3.37% 12.36%      0.26s  9.74%  runtime.netpoll
     0.03s  1.12% 13.48%      0.25s  9.36%  main.buildwinnertakesallbagsofwords
     0.02s  0.75% 14.23%      0.24s  8.99%  runtime.growslice
     0.24s  8.99% 23.22%      0.24s  8.99%  runtime.memmove
         0     0% 23.22%      0.22s  8.24%  runtime.mcall
         0     0% 23.22%      0.22s  8.24%  runtime.schedule
(pprof) web


1082 •erik@big-sur-box• e-gun/HipparchiaGoDBHelper/ % go tool pprof HipparchiaGoDBHelper ./mem_profiler_output.bin

(pprof) top10
Showing nodes accounting for 19321.91kB, 100% of 19321.91kB total
Showing top 10 nodes out of 11
      flat  flat%   sum%        cum   cum%
   11856kB 61.36% 61.36%    11856kB 61.36%  strings.(*genericReplacer).Replace
 4608.59kB 23.85% 85.21%  4608.59kB 23.85%  strings.(*Builder).grow (inline)
 2345.25kB 12.14% 97.35% 19321.91kB   100%  main.HipparchiaBagger
  512.06kB  2.65%   100%   512.06kB  2.65%  main.stopworddropper (inline)
         0     0%   100%  5120.66kB 26.50%  main.dropstopwords
         0     0%   100% 19321.91kB   100%  main.main
         0     0%   100%    11856kB 61.36%  main.splitonpunctuaton
         0     0%   100% 19321.91kB   100%  runtime.main
         0     0%   100%  4608.59kB 23.85%  strings.(*Builder).Grow (inline)
         0     0%   100%    11856kB 61.36%  strings.(*Replacer).Replace

(pprof) top10 -cum
Showing nodes accounting for 18.37MB, 97.35% of 18.87MB total
Showing top 10 nodes out of 11
      flat  flat%   sum%        cum   cum%
    2.29MB 12.14% 12.14%    18.87MB   100%  main.HipparchiaBagger
         0     0% 12.14%    18.87MB   100%  main.main
         0     0% 12.14%    18.87MB   100%  runtime.main
         0     0% 12.14%    11.58MB 61.36%  main.splitonpunctuaton
         0     0% 12.14%    11.58MB 61.36%  strings.(*Replacer).Replace
   11.58MB 61.36% 73.50%    11.58MB 61.36%  strings.(*genericReplacer).Replace
         0     0% 73.50%        5MB 26.50%  main.dropstopwords
         0     0% 73.50%     4.50MB 23.85%  strings.(*Builder).Grow (inline)
    4.50MB 23.85% 97.35%     4.50MB 23.85%  strings.(*Builder).grow (inline)
         0     0% 97.35%     4.50MB 23.85%  strings.Join


// fyi:
//  https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/
//  https://blog.golang.org/pprof
//  https://software.intel.com/content/www/us/en/develop/blogs/debugging-performance-issues-in-go-programs.html